/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 *
 *   Caio Gustavo Mesquita Ângelo
 *   17/08/2015
 *   V 1.0
 */

#include <stdio.h>
#include <xil_io.h>
#include "platform.h"
#include <time.h>

#define AES_BASEADDR 0x44A00000
#define BI_E_0_OFFSET 0x00
#define BI_E_1_OFFSET 0x04
#define BI_E_2_OFFSET 0x08
#define BI_E_3_OFFSET 0x0C
#define BO_E_0_OFFSET 0x10
#define BO_E_1_OFFSET 0x14
#define BO_E_2_OFFSET 0x18
#define BO_E_3_OFFSET 0x1C
#define BI_D_0_OFFSET 0x20
#define BI_D_1_OFFSET 0x24
#define BI_D_2_OFFSET 0x28
#define BI_D_3_OFFSET 0x2C
#define BO_D_0_OFFSET 0x30
#define BO_D_1_OFFSET 0x34
#define BO_D_2_OFFSET 0x38
#define BO_D_3_OFFSET 0x3C
#define CONFIG_OFFSET 0x40
#define CONFIG_0_OFFSET 0x40
#define CONFIG_1_OFFSET 0x41


void print(char *str);
void encripta(void);

int main()
{
    init_platform();

    printf("vai comecar encripta\n");

    encripta();

    printf("done/n");

/*	int bo_0 = 0;
	int bo_1 = 0;
	int bo_2 = 0;
	int bo_3 = 0;
	int config = 0;
*/


 //   printf("Teste: %d %d %d %d %d\n\r", bo_0, bo_1, bo_2, bo_3, config);
/*    printf("Inicializando CONFIG\n\r");
    Xil_Out32(AES_BASEADDR+CONFIG_OFFSET,0x00000001);
    printf("Escrevendo chave K0\n\r");
    Xil_Out32(AES_BASEADDR+BI_E_0_OFFSET,0x09cf4f3c);
    Xil_Out32(AES_BASEADDR+BI_E_1_OFFSET,0xabf71588);
    Xil_Out32(AES_BASEADDR+BI_E_2_OFFSET,0x28aed2a6);
    Xil_Out32(AES_BASEADDR+BI_E_3_OFFSET,0x2b7e1516);
    printf("Inicializando Key_Expansion\n\r");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x09);

    printf("Conferindo se Key_Expansion terminou\n\r");
    config = Xil_In32(AES_BASEADDR+CONFIG_OFFSET);
    printf("Config = %x \n\r",config);

    printf("Preparando Encriptação\n\r");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x08);
    printf("Escrevendo bloco de entrada 0x3243f6a8885a308d313198a2e0370734\n\r");
    Xil_Out32(AES_BASEADDR+BI_E_0_OFFSET,0xe0370734);
    Xil_Out32(AES_BASEADDR+BI_E_1_OFFSET,0x313198a2);
    Xil_Out32(AES_BASEADDR+BI_E_2_OFFSET,0x885a308d);
    Xil_Out32(AES_BASEADDR+BI_E_3_OFFSET,0x3243f6a8);
    printf("Inicializando Encriptação\n\r");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x0A);
    printf("Lendo bloco encriptado\n\r");
    bo_0 = Xil_In32(AES_BASEADDR+BO_E_0_OFFSET);
    bo_1 = Xil_In32(AES_BASEADDR+BO_E_1_OFFSET);
    bo_2 = Xil_In32(AES_BASEADDR+BO_E_2_OFFSET);
    bo_3 = Xil_In32(AES_BASEADDR+BO_E_3_OFFSET);


    printf("Bo = %x %x %x %x\n\r",bo_3, bo_2, bo_1, bo_0);
 */ //  printf("Done");

    return 0;
}

void encripta(void)
{
	int bo_0 = 0;
	int bo_1 = 0;
	int bo_2 = 0;
	int bo_3 = 0;
	int config = 0;
	int i;



    printf("Teste: %d %d %d %d %d\n", bo_0, bo_1, bo_2, bo_3, config);


    printf("Inicializando CONFIG\n");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x01);

    printf("\nConferindo Config\n");
    config = Xil_In32(AES_BASEADDR+CONFIG_OFFSET);
    printf("Config = %8x \n",config);
    printf("Endereço de reg16 é 0x%8x \n",AES_BASEADDR+CONFIG_OFFSET);

    printf("Escrevendo chave K0\n");
    Xil_Out32(AES_BASEADDR+BI_E_0_OFFSET,0x09cf4f3c);
    Xil_Out32(AES_BASEADDR+BI_E_1_OFFSET,0xabf71588);
    Xil_Out32(AES_BASEADDR+BI_E_2_OFFSET,0x28aed2a6);
    Xil_Out32(AES_BASEADDR+BI_E_3_OFFSET,0x2b7e1516);
    printf("Inicializando Key_Expansion\n");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x09);

    printf("Colocando atraso...\n");
    while( config == 1 )
    {
    	printf("Conferindo Config\t");
    	config = Xil_In32(AES_BASEADDR+CONFIG_OFFSET);
    	printf("Config = %8x \n",config);
    }
    printf("\n\rConferindo se Key_Expansion terminou\n");
    config = Xil_In32(AES_BASEADDR+CONFIG_OFFSET);
    printf("Config = %8x \n",config);

    printf("Preparando Encriptação\n");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x08);
    printf("Escrevendo bloco de entrada 0x3243f6a8885a308d313198a2e0370734\n");
    Xil_Out32(AES_BASEADDR+BI_E_0_OFFSET,0xe0370734);
    Xil_Out32(AES_BASEADDR+BI_E_1_OFFSET,0x313198a2);
    Xil_Out32(AES_BASEADDR+BI_E_2_OFFSET,0x885a308d);
    Xil_Out32(AES_BASEADDR+BI_E_3_OFFSET,0x3243f6a8);
    printf("Inicializando Encriptação\n");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x0A);
    printf("Lendo bloco encriptado\n");
    bo_0 = Xil_In32(AES_BASEADDR+BO_E_0_OFFSET);
    bo_1 = Xil_In32(AES_BASEADDR+BO_E_1_OFFSET);
    bo_2 = Xil_In32(AES_BASEADDR+BO_E_2_OFFSET);
    bo_3 = Xil_In32(AES_BASEADDR+BO_E_3_OFFSET);


    printf("Bo = %x %x %x %x\n",bo_3, bo_2, bo_1, bo_0);
    printf("Done");
}
