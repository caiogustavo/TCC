/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 *
 *   Caio Gustavo Mesquita Ângelo
 *   17/08/2015
 *   V 1.0
 */

#include <stdio.h>
#include <stdint.h>
//#include <xil_io.h>
//#include "platform.h"
#include "aes_driver.h"
//#include "ringbuffer.h"
//#include <time.h>

/*
#define AES_BASEADDR 0x44A00000
#define BI_E_0_OFFSET 0x00
#define BI_E_1_OFFSET 0x04
#define BI_E_2_OFFSET 0x08
#define BI_E_3_OFFSET 0x0C
#define BO_E_0_OFFSET 0x10
#define BO_E_1_OFFSET 0x14
#define BO_E_2_OFFSET 0x18
#define BO_E_3_OFFSET 0x1C
#define BI_D_0_OFFSET 0x20
#define BI_D_1_OFFSET 0x24
#define BI_D_2_OFFSET 0x28
#define BI_D_3_OFFSET 0x2C
#define BO_D_0_OFFSET 0x30
#define BO_D_1_OFFSET 0x34
#define BO_D_2_OFFSET 0x38
#define BO_D_3_OFFSET 0x3C
#define CONFIG_0_OFFSET 0x40
#define CONFIG_1_OFFSET 0x41
#define CONFIG_2_OFFSET 0x42
#define CONFIG_3_OFFSET 0x43

#define DEBUG_SIGNAL_0_OFFSET 0x44
#define DEBUG_SIGNAL_1_OFFSET 0x48
#define DEBUG_SIGNAL_2_OFFSET 0x4C
#define DEBUG_SIGNAL_3_OFFSET 0x50
#define DEBUG_SEL_OFFSET 0x54

#define CODE_S0 0x00
#define CODE_S1 0x01
#define CODE_S2 0x02
#define CODE_S3 0x03
#define CODE_S4 0x04
#define CODE_S5 0x05
#define CODE_Z0 0x06
#define CODE_Z1 0x07
#define CODE_Z2 0x08
#define CODE_Z3 0x09
#define CODE_Z4 0x0A
#define CODE_Z5 0x0B
#define CODE_K1 0x0C
#define CODE_K2 0x0D
#define CODE_K5 0x0E
#define CODE_MODEW 0x0F
#define CODE_E0 0x10
#define CODE_E1 0x11
#define CODE_E2 0x12
#define CODE_E3 0x13
#define CODE_E4 0x14
#define CODE_E5 0x15
#define CODE_E6 0x16
#define CODE_E7 0x17
#define CODE_E8 0x18
#define CODE_E9 0x19
*/

//void print(char *str);
void encripta(void);

int main()
{
   // init_platform();

    printf("vai comecar encripta\n\r");

    encripta();

    printf("done\n\r");

/*	int bo_0 = 0;
	int bo_1 = 0;
	int bo_2 = 0;
	int bo_3 = 0;
	int config = 0;
*/


 //   printf("Teste: %d %d %d %d %d\n\r", bo_0, bo_1, bo_2, bo_3, config);
/*    printf("Inicializando CONFIG\n\r");
    Xil_Out32(AES_BASEADDR+CONFIG_OFFSET,0x00000001);
    printf("Escrevendo chave K0\n\r");
    Xil_Out32(AES_BASEADDR+BI_E_0_OFFSET,0x09cf4f3c);
    Xil_Out32(AES_BASEADDR+BI_E_1_OFFSET,0xabf71588);
    Xil_Out32(AES_BASEADDR+BI_E_2_OFFSET,0x28aed2a6);
    Xil_Out32(AES_BASEADDR+BI_E_3_OFFSET,0x2b7e1516);
    printf("Inicializando Key_Expansion\n\r");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x09);

    printf("Conferindo se Key_Expansion terminou\n\r");
    config = Xil_In32(AES_BASEADDR+CONFIG_OFFSET);
    printf("Config = %x \n\r",config);

    printf("Preparando Encriptação\n\r");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x08);
    printf("Escrevendo bloco de entrada 0x3243f6a8885a308d313198a2e0370734\n\r");
    Xil_Out32(AES_BASEADDR+BI_E_0_OFFSET,0xe0370734);
    Xil_Out32(AES_BASEADDR+BI_E_1_OFFSET,0x313198a2);
    Xil_Out32(AES_BASEADDR+BI_E_2_OFFSET,0x885a308d);
    Xil_Out32(AES_BASEADDR+BI_E_3_OFFSET,0x3243f6a8);
    printf("Inicializando Encriptação\n\r");
    Xil_Out8(AES_BASEADDR+CONFIG_0_OFFSET,0x0A);
    printf("Lendo bloco encriptado\n\r");
    bo_0 = Xil_In32(AES_BASEADDR+BO_E_0_OFFSET);
    bo_1 = Xil_In32(AES_BASEADDR+BO_E_1_OFFSET);
    bo_2 = Xil_In32(AES_BASEADDR+BO_E_2_OFFSET);
    bo_3 = Xil_In32(AES_BASEADDR+BO_E_3_OFFSET);


    printf("Bo = %x %x %x %x\n\r",bo_3, bo_2, bo_1, bo_0);
 */ //  printf("Done");

    return 0;
}

void encripta(void)
{
	int bo_0 = 0;
	int bo_1 = 0;
	int bo_2 = 0;
	int bo_3 = 0;
	int config = 0;
	int i;
	int cnt =0;
	//unsigned int key[4];
	uint32_t key[4];
	uint32_t bi_e[4];
	uint32_t *bo_e;//, *bo_d;
	//RingBuffer *enc_in_buf;


	int config1, config2, config3, config4, config5, config6, config7, config8, config9, config10;
/*	int debug_signal_0 = 0;
	int debug_signal_31, debug_signal_32, debug_signal_33, debug_signal_34,debug_signal_35, debug_signal_36, debug_signal_37, debug_signal_38, debug_signal_39;
	int debug_signal_1 = 0;
	int debug_signal_2 = 0;
	int debug_signal_3 = 0;
*/

	key[0] = 0x09cf4f3c;
	key[1] = 0xabf71588;
	key[2] = 0x28aed2a6;
	key[3] = 0x2b7e1516;

	bi_e[0] = 0xe0370734;
	bi_e[1] = 0x313198a2;
	bi_e[2] = 0x885a308d;
	bi_e[3] = 0x3243f6a8;

	//enc_in_buf = RingBuffer_create(50);

	aes_init_device();

	aes_key_expansion( key );

	printf("key = 0x%08x%08x%08x%08x \n\r",aes_read_32bits(AES_DATA_IN_KEY_OFFSET+12),
			aes_read_32bits(AES_DATA_IN_KEY_OFFSET+8), aes_read_32bits(AES_DATA_IN_KEY_OFFSET+4),
			aes_read_32bits(AES_DATA_IN_KEY_OFFSET));

	aes_init_enc( bi_e );

	printf("bi_e = 0x%08x%08x%08x%08x \n\r",aes_read_32bits(AES_DATA_IN_ENC_OFFSET+12),
			aes_read_32bits(AES_DATA_IN_ENC_OFFSET+8), aes_read_32bits(AES_DATA_IN_ENC_OFFSET+4),
			aes_read_32bits(AES_DATA_IN_ENC_OFFSET));

	while ( !aes_enc_rdy() ) {
	}

	bo_e = aes_read_128bits( AES_DATA_OUT_ENC_OFFSET );//aes_read_enc();

	printf("bo_e = 0x%08x%08x%08x%08x \n\r",aes_read_32bits(AES_DATA_OUT_ENC_OFFSET+12),
			aes_read_32bits(AES_DATA_OUT_ENC_OFFSET+8), aes_read_32bits(AES_DATA_OUT_ENC_OFFSET+4),
			aes_read_32bits(AES_DATA_OUT_ENC_OFFSET));

	/*aes_init_dec( bo_e );

	while ( !aes_dec_rdy() ) {
	}

	bo_d = aes_read_dec();
*/
	printf("bi_e = 0x%08x%08x%08x%08x \n\r",bi_e[3],bi_e[2],bi_e[1],bi_e[0]);
	printf("bo_e = 0x%08x%08x%08x%08x \n\r",bo_e[3],bo_e[2],bo_e[1],bo_e[0]);
	//printf("bo_d = 0x%08x%08x%08x%08x \n\r",bo_d[3],bo_d[2],bo_d[1],bo_d[0]);

}
