/*
 * fhss.c
 *
 *  Created on: 19/10/2015
 *      Author: Caio Gustavo Mesquita Ângelo
 */
/*
#include <stdio.h>
#include <stdint.h>
#include "fhss.h"

int rx_to_buf(RingBuffer* buf_rx, RingBuffer* buf_fh)
{
	uint8_t symb[M];
	uint8_t symbol;
	int i;

	while ( (buf_rx->ndata > 0) && (buf_fh->length - buf_fh->ndata >= M) ) // Verifica se tem algo no buf_rx e espaço para escrever em buf_fh
	{
		// Read next symbol
		if ( !RingBuffer_read(buf_rx, &symbol, 1) )
		{
			printf("\n\rFAILED READING BUF_RX");
			return 0;
		}

		for(i=0; i<M; i++) // Bits mais significativos devem vir primeiro sempre
			symb[i] = (symbol >> i) & 1;
		if ( !RingBuffer_write(buf_fh, symb, M) )
		{
			printf("\n\rFAILED WRITING BUF_FH");
			return 0;
		}
	}

	return 1;
}

int buf_to_tx(RingBuffer* buf_tx, RingBuffer* buf_fh)
{
	uint8_t symb[M];
	uint8_t symbol;
	int i;

	while ( (buf_tx->length - buf_tx->ndata > 0) && (buf_fh->ndata >= M) ) // Verifica se tem algo no buf_rx e espaço para escrever em buf_fh
	{
		// Read next bit
		// Bits mais significativos devem ir primeiro sempre
		symbol = 0;
		if ( !RingBuffer_read(buf_fh, symb, M) )
		{
			printf("\n\rFAILED READING BUF_FH");
			return 0;
		}

		for(i=0; i<M; i++)
			symbol = symbol | ( symb[i]<<i );//symb[i] = (symbol >> i) & 1;
		if ( !RingBuffer_write(buf_tx, &symbol, 1) )
		{
			printf("\n\rFAILED WRITING BUF_TX");
			return 0;
		}
	}

	return 1;
}

int extract_payload(RingBuffer *buf_rx, RingBuffer *buf_fh, uint8_t *payload)
{
	uint8_t last_bits[3] = {2, 2, 2}; //last_bits[0] é o mais atual e last_bits[2] é o mais antigo
	uint8_t temp;
	int step = 1;
	int size = 0;
	int hash;
	int i;
	int count = 0;

	printf("\n\rbuf_fh->ndata = %d\tbuf_rx->ndata = %d",buf_fh->ndata,buf_rx->ndata);

	while(step < 7)
	{

		if ( !rx_to_buf(buf_rx, buf_fh) ) // Atualiza buf_fh o que der: pressupõe-se que a velocidade de atualização é maior que a taxa de transmissão de dados... isso é importante para não se perderem dados
		{
			printf("\n\rFAILED UPDATING BUF_FH");
			return 0;
		}

		printf("\n\r step = %d\tsize = %d",step,size);
		printf("\tbuf_fh->ndata = %d\tbuf_rx->ndata = %d",buf_fh->ndata,buf_rx->ndata);

		switch(step){
			case 1: // Etapa 1: Espera pelos bits de sincronização
				while(buf_fh->ndata > 0)
				{
					// Vai ler um bit novo, então deve-se guardar os 2 mais recentes
					last_bits[2] = last_bits[1];
					last_bits[1] = last_bits[0];
					// Lê um bit
					if ( !RingBuffer_read(buf_fh, last_bits, 1) )
					{
						printf("\n\rFAILED READING BUF_FH");
						return 0;
					}
					if( last_bits[0]==last_bits[2] && last_bits[0]!=last_bits[1]) // Encontrou uma sequência "010" ou "101"
					{
						step++;
						break;
					}
				}
				break;
			case 2: // Etapa 2: Procura início do fim do prêambulo (coincidência entre os últimos 2 bits). O fim é 11001100
				while(buf_fh->ndata > 0)
				{
					// Vai ler um bit novo, então deve-se guardar o último
					last_bits[1] = last_bits[0];
					// Lê um bit
					if ( !RingBuffer_read(buf_fh, last_bits, 1) )
					{
						printf("\n\rFAILED READING BUF_FH");
						return 0;
					}
					if( last_bits[0]==last_bits[1]) // Encontrou uma sequência "010" ou "101"
					{
						step++;
						break;
					}
				}
				break;
			case 3: // Etapa 3: Recebe o restante do preâmbulo e confere se está correto. 11001100 = 204 em decimal
				if( buf_fh->ndata > 5)
				{
					temp = (last_bits[1]<<7) | (last_bits[0]<<6);
					for(i=5; i>=0; i--)
					{
						if ( !RingBuffer_read(buf_fh, last_bits, 1) )
						{
							printf("\n\rFAILED READING BUF_FH");
							return 0;
						}
						temp = temp | (last_bits[0]<<i);
					}
					if( temp!=204 )
					{
						printf("\n\rFAILED GETTING PREAMBLE");
						return 0;
					}
					step++;
				}
				break;
			case 4: // Etapa 4: Lê o campo SIZE (tamanho do payload em bytes)
				if( buf_fh->ndata >= 8*SIZE_BYTES )
				{
					size = 0;
					for(i=8*SIZE_BYTES-1; i>=0; i--)
					{
						if ( !RingBuffer_read(buf_fh, last_bits, 1) )
						{
							printf("\n\rFAILED READING BUF_FH");
							return 0;
						}
						size = size | (last_bits[0]<<i);
					}
					step++;
				}
				break;
			case 5: // Etapa 5: Lê o payload
				while( buf_fh->ndata > 7 && count<size)
				{
					temp = 0;
					for( i=7; i>=0; i--)
					{
						if ( !RingBuffer_read(buf_fh, last_bits, 1) )
						{
							printf("\n\rFAILED READING BUF_FH");
							return 0;
						}
						temp = temp | (last_bits[0]<<i);
					}
					payload[count]=temp;
					count++;
				}
				if( count==size )
					step++;
				break;
			case 6: // Etapa 6: Lê o hash do payload, calcula o hash que deveria dar e compara para verificar a integridade do quadro
				//printf("\n\rpayload = 0x%02x%02x\n\rbuf->ndata = %d",payload[0],payload[1],buf_fh->ndata);
				if( buf_fh->ndata >= 8*HASH_BYTES)
				{
					hash = 0;
					for(i=8*HASH_BYTES-1; i>=0; i--)
					{
						if ( !RingBuffer_read(buf_fh, last_bits, 1) )
						{
							printf("\n\rFAILED READING BUF_FH");
							return 0;
						}
						hash = hash | (last_bits[0]<<i);
					}
					printf("\n\rhash = 0x%04x",hash);
					if( hash != hash)//calc_hash(payload) ) // FALTA FAZER ESSA FUNÇÃO DO HASH
					{
						printf("\n\rFRAME CORRUPTED");
						return 0;
					}
					step++;
				}
				break;
			default:
				break;
		}
	}
	return size;
}
*/

/*
 * fhss.c
 *
 *  Created on: 19/10/2015
 *      Author: Caio Gustavo Mesquita Ângelo
 */

#include <stdio.h>
#include <stdint.h>
#include <math.h>
#include "fhss.h"
#include "crc.h"

#define FAILURE -1
#define SUCCESS 0

int rx_to_buf(RingBuffer* buf_rx, RingBuffer* buf_fh)
{
	uint8_t symb[M];
	uint8_t symbol;
	int i;

	while ( (buf_rx->ndata > 0) && (buf_fh->length - buf_fh->ndata >= M) ) // Verifica se tem algo no buf_rx e espaço para escrever em buf_fh
	{
		// Read next symbol
		//Sleep(1);

		if ( RingBuffer_read(buf_rx, &symbol, 1) )
		{
			printf("\n\rFAILED READING BUF_RX");
			return FAILURE;
		}

		for(i=0; i<M; i++) // Bits menos significativos do símbolo devem vir primeiro
			symb[i] = (symbol >> i) & 1;
		if ( RingBuffer_write(buf_fh, symb, M) )
		{
			printf("\n\rFAILED WRITING BUF_FH");
			return FAILURE;
		}
	}

	return SUCCESS;
}

int buf_to_tx(RingBuffer* buf_tx, RingBuffer* buf_fh)
{
	uint8_t symb[M];
	uint8_t symbol;
	int i;

	while ( (buf_tx->length - buf_tx->ndata > 0) && (buf_fh->ndata >= M) ) // Verifica se tem algo no buf_rx e espaço para escrever em buf_fh
	{
		// Read next bit
		// Bits mais significativos devem ir primeiro sempre
		symbol = 0;
		if ( !RingBuffer_read(buf_fh, symb, M) )
		{
			printf("\n\rFAILED READING BUF_FH");
			return 0;
		}

		for(i=0; i<M; i++)
			symbol = symbol | ( symb[i]<<i );//symb[i] = (symbol >> i) & 1;
		if ( !RingBuffer_write(buf_tx, &symbol, 1) )
		{
			printf("\n\rFAILED WRITING BUF_TX");
			return 0;
		}
	}

	return 1;
}

int send_frame( RingBuffer *buf_tx, frame_data *frame )
{
	int err;
	printf("\n\rEntrou no send_frame. frame->nsymb = %d\tbuf_tx->ndata = %d\tbuf_tx->length = %d",frame->nsymb,buf_tx->ndata,buf_tx->length);
	if( (err = RingBuffer_write(buf_tx, frame->data, frame->nsymb)) )
	{
		printf("\n\rERROR %d: RingBuffer_write",err);
		return FAILURE;
	}
	printf("\n\rTx escrito no send_frame");
	free(frame->data);
	free(frame);
	printf("\n\rframe free");

	return SUCCESS;
}

frame_data* generate_frame( uint8_t *payload, int length )
{
	int nbytes = length + PRE_BYTES + CRC_BYTES;
	int nsymb = (int)ceil( 8*nbytes/M ); // 32 => CRC e 16 => preâmbulo
	int nzeros = M*nsymb-8*(nbytes);
	uint8_t preamble[8*PRE_BYTES]= {1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,0};
	uint8_t bits[M*nsymb];
	uint8_t temp;
	frame_data *frame;
	int i,j, err;
	crc crc_result = F_CRC_CalculaCheckSum(payload, (uint16_t)length);

	printf("\n\rCRC na hora da geração do frame: %08x",crc_result);

	for(i=0; i<nzeros; i++)
		bits[i]=0;

	for(i=0; i<8*PRE_BYTES; i++)
		bits[i+nzeros]=preamble[i];

	for(i=0; i<length; i++)
		for(j=0;j<8;j++)
			bits[8*i+j+nzeros+8*PRE_BYTES] = (payload[i]>>(7-j))&1; //registra j-ésimo bit de payload (primeiro os mais significativos

	for(i=0; i<8*CRC_BYTES; i++)
		bits[i+nzeros+8*PRE_BYTES+8*length] = (crc_result>>(8*CRC_BYTES-1-i))&1;

	frame = (frame_data*)malloc(sizeof(frame_data));
	frame->data = (uint8_t*)malloc(nsymb*sizeof(uint8_t));

	frame->nsymb = nsymb;

	printf("\n\rframe->data = ");
	for(i=0;i<nsymb;i++)
	{
		temp=0;
		for(j=0;j<M;j++)
			temp |= bits[i*M+j]<<j; // Bits menos significativos do símbolo vem primeiro
		frame->data[i]=temp;
		printf("%02x ",temp);
	}


	return frame;
}

int extract_payload(RingBuffer *buf_rx, RingBuffer *buf_fh, uint8_t *payload)
{
	uint8_t last_bits[3] = {2, 2, 2}; //last_bits[0] é o mais atual e last_bits[2] é o mais antigo
	uint8_t temp;
	int step = 1;
	int size = 0;
	int hash;
	int i, err;
	int count = 0;

	crc crc_result;

	printf("\n\rbuf_fh->ndata = %d\tbuf_rx->ndata = %d",buf_fh->ndata,buf_rx->ndata);

	printf("\n\rDentro de extract_payload:");

	while(step < 7)
	{

		if ( rx_to_buf(buf_rx, buf_fh) ) // Atualiza buf_fh o que der: pressupõe-se que a velocidade de atualização é maior que a taxa de transmissão de dados... isso é importante para não se perderem dados
		{
			printf("\n\rFAILED UPDATING BUF_FH");
			return FAILURE;
		}

		printf("\n\rbuf->rx =\n\r\t");
		for(i=0;i<buf_rx->length;i++)
			printf("%1x ",buf_rx->buffer[i]);

		//printf("\n\r step = %d\tsize = %d",step,size);
		//printf("\tbuf_fh->ndata = %d\tbuf_rx->ndata = %d",buf_fh->ndata,buf_rx->ndata);

		switch(step){
			case 1: // Etapa 1: Espera pelos bits de sincronização
				while(buf_fh->ndata > 0)
				{
					// Vai ler um bit novo, então deve-se guardar os 2 mais recentes
					last_bits[2] = last_bits[1];
					last_bits[1] = last_bits[0];
					// Lê um bit
					if ( err = RingBuffer_read(buf_fh, last_bits, 1) )
					{
						printf("\n\rERROR %d: FAILED READING BUF_FH",err);
						return FAILURE;
					}
					if( last_bits[0]==last_bits[2] && last_bits[0]!=last_bits[1]) // Encontrou uma sequência "010" ou "101"
					{
						step++;
						break;
					}
				}
				break;
			case 2: // Etapa 2: Procura início do fim do prêambulo (coincidência entre os últimos 2 bits). O fim é 11001100
				while(buf_fh->ndata > 0)
				{
					// Vai ler um bit novo, então deve-se guardar o último
					last_bits[1] = last_bits[0];
					// Lê um bit
					if ( err = RingBuffer_read(buf_fh, last_bits, 1) )
					{
						printf("\n\rERROR %d: FAILED READING BUF_FH",err);
						return FAILURE;
					}
					if( last_bits[0]==last_bits[1]) // Encontrou uma sequência "010" ou "101"
					{
						step++;
						break;
					}
				}
				break;
			case 3: // Etapa 3: Recebe o restante do preâmbulo e confere se está correto. 11001100 = 204 em decimal
				if( buf_fh->ndata > 5)
				{
					temp = (last_bits[1]<<7) | (last_bits[0]<<6);
					for(i=5; i>=0; i--)
					{
						if ( err = RingBuffer_read(buf_fh, last_bits, 1) )
						{
							printf("\n\rERROR %d: FAILED READING BUF_FH",err);
							return FAILURE;
						}
						temp = temp | (last_bits[0]<<i);
					}
					if( temp!=204 )
					{
						printf("\n\rERROR: FAILED GETTING PREAMBLE");
						return FAILURE;
					}
					step++;
				}
				break;
			case 4: // Etapa 4: Lê o campo SIZE (tamanho do payload em bytes)
				if( buf_fh->ndata >= 8*SIZE_BYTES )
				{
					size = 0;
					for(i=8*SIZE_BYTES-1; i>=0; i--)
					{
						if ( err = RingBuffer_read(buf_fh, last_bits, 1) )
						{
							printf("\n\rERROR %d: FAILED READING BUF_FH",err);
							return FAILURE;
						}
						size = size | (last_bits[0]<<i);
					}
					step++;
				}
				break;
			case 5: // Etapa 5: Lê o payload
				while( buf_fh->ndata > 7 && count<size)
				{
					temp = 0;
					for( i=7; i>=0; i--)
					{
						if ( err = RingBuffer_read(buf_fh, last_bits, 1) )
						{
							printf("\n\rERROR %d: FAILED READING BUF_FH",err);
							return FAILURE;
						}
						temp = temp | (last_bits[0]<<i);
					}
					payload[count]=temp;
					count++;
				}
				if( count==size )
					step++;
				break;
			case 6: // Etapa 6: Lê o hash do payload, calcula o hash que deveria dar e compara para verificar a integridade do quadro
				//printf("\n\rpayload = 0x%02x%02x\n\rbuf->ndata = %d",payload[0],payload[1],buf_fh->ndata);
				if( buf_fh->ndata >= 8*HASH_BYTES)
				{
					hash = 0;
					for(i=8*HASH_BYTES-1; i>=0; i--)
					{
						if ( err = RingBuffer_read(buf_fh, last_bits, 1) )
						{
							printf("\n\rERROR %d: FAILED READING BUF_FH",err);
							return FAILURE;
						}
						hash = hash | (last_bits[0]<<i);
					}
					printf("\n\rhash = 0x%04x",hash);
					crc_result = F_CRC_CalculaCheckSum(payload, size);
					printf("\n\rCRC na hora da verificação do frame: %08x",crc_result);
					if( hash != crc_result)// CRC ou HASH (escolhido CRC 32 bits
					{
						printf("\n\rERROR: FRAME CORRUPTED");
						return 0;
					}
					step++;
				}
				break;
			default:
				break;
		}
		//Sleep(10);
	}
	return size;
}
