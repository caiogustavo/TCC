/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 *
 *   Caio Gustavo Mesquita Ângelo
 *   17/08/2015
 *   V 1.0
 */

#include <stdio.h>
#include <stdint.h>
#include <iio.h>
#include <pthread.h>
#include <time.h>
#include <signal.h>

#include "aes_driver.h"
#include "ringbuffer.h"
#include "dh.h"
#include "fhss.h"
#include "ad9361_iiostream.h"


void encripta(void);
//void iio_stream(void);

int main()
{
   // init_platform();

	//struct iio_device *tx;
	//struct iio_device *rx;
	//struct iio_context *ctx   = NULL;

	//ctx = iio_create_default_context();

	//printf("Vai começar iiostream\n\r");

	//ad9361_iiostream();



    printf("vai comecar teste\n\r");

    encripta();

    printf("\n\rdone\n\r");

    return 0;
}

/*void iio_stream(void)
{

}*/


void encripta(void)
{
	int bo_0 = 0;
	int bo_1 = 0;
	int bo_2 = 0;
	int bo_3 = 0;
	int config = 0;
	int i;
	int cnt =0;
	//unsigned int key[4];
	uint32_t key[4];
	//uint32_t bi_e[4];
	char text1[30] = "Se meu programa estiver certo,";
	char text2[46] = " vou conseguir criptografar toda essa mensagem";
	char text3[31] = " e decriptografá-la em seguida!";

	char gen[2049] = //"6246";
			
	char exp[2049] = //"9A2E";
			"3FB32C9B73134D0B2E77506660EDBD484CA7B18F21EF205407F4793A1A0BA12510DBC15077BE463FFF4FED4AAC0BB555BE3A6C1B0C6B47B1BC3773BF7E8C6F62901228F8C28CBB18A55AE31341000A650196F931C77A57F2DDF463E5E9EC144B777DE62AAAB8A8628AC376D282D6ED3864E67982428EBC831D14348F6F2F9193B5045AF2767164E1DFC967C1FB3F2E55A4BD1BFFE83B9C80D052B985D182EA0ADB2A3B7313D3FE14C8484B1E052588B9B7D2BBD2DF016199ECD06E1557CD0915B3353BBB64E0EC377FD028370DF92B52C7891428CDC67EB6184B523D1DB246C32F63078490F00EF8D647D148D47954515E2327CFEF98C582664B4C0F6CC41659";
	char prime[65] = //"10001";
			"8CF83642A709A097B447997640124DA299B1A47D1EB3750BA304B0FE64F5FBD2";

	uint32_t *bo_e, *bo_d;
	RingBuffer *enc_in_buf, *enc_out_buf;
	RingBuffer *dec_in_buf, *dec_out_buf;

	RingBuffer *buf_tx_rx, *buf_tx, *buf_fh_tx, *buf_fh_rx;
	uint8_t seq_bits_tx[66] = {0, 0, 0, 0, 0, 0, 0, 0, // 0 padrão de ociosidade
								1, 0, 1, 0, 1, 0, 1, 0, // bits de sincronização
								1, 1, 0, 0, 1, 1, 0, 0, // Fim do preâmbulo
								0, 0, 0, 0, 0, 0, 1, 0, // Size = 2
								1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, // Payload = 0xCA10
								1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, // Hash = 0xABCD
								0, 0}; // Só para completar múltiplo de M
	uint8_t seq_bits_rx[66];
	uint8_t payload[256];
	int payload_size;

	clock_t time1, time2;

	timer_t timer_id;
	struct itimerspec timer_value, curr_value;
	struct sigevent sevp;
	printf("\n\rTamanho do clock_t é %d",sizeof(clock_t));
	printf("\n\rTamanho do time_t é %d",sizeof(time_t));
	printf("\n\rTamanho do clock rate é %d",CLOCKS_PER_SEC);

	sevp.sigev_notify = SIGEV_NONE;

	if (timer_create(CLOCK_MONOTONIC, &sevp, &timer_id))
		printf("\n\rFAILED CREATING TIMER_ID");

	timer_value.it_value.tv_nsec = 1000000;
	timer_value.it_interval.tv_nsec = 1000000;

	if ( timer_settime(timer_id, NULL, &timer_value, NULL) )
		printf("\n\rFAILED SETTING TIME");

	printf("\n\rinit_time = %d",timer_value.it_value.tv_nsec);

	if ( timer_gettime(timer_id, &curr_value) )
		printf("\n\rFAILED SETTING TIME");
	printf("\n\rtime 1 = %d",curr_value.it_value.tv_nsec);


	time1 = clock();



	int config1, config2, config3, config4, config5, config6, config7, config8, config9, config10;

	//printf("resultado do DH: \n\r\t");
	//dh(gen,exp,prime);
	//printf("\n\rresultado esperado: DED4\n\r");


	key[0] = 0x09cf4f3c;
	key[1] = 0xabf71588;
	key[2] = 0x28aed2a6;
	key[3] = 0x2b7e1516;


	buf_tx_rx = RingBuffer_create(11);
	buf_fh_tx = RingBuffer_create(66);
	buf_fh_rx = RingBuffer_create(66);

	RingBuffer_write( buf_fh_tx, seq_bits_tx, 66 );
	buf_to_tx( buf_tx_rx, buf_fh_tx);
	//rx_to_buf( buf_tx_rx, buf_fh_rx);
	payload_size = extract_payload(buf_tx_rx, buf_fh_rx, payload);
	//RingBuffer_read( buf_fh_rx, seq_bits_rx, 18);

	printf("\n\rPayload_size = %d\n\rPayload = 0x",payload_size);
	for( i=0; i<payload_size; i++)
		printf("%02x",payload[i]);
	printf("\n\r");

	time2 = clock();

	if ( timer_gettime(timer_id, &curr_value) )
		printf("\n\rFAILED SETTING TIME");
	printf("\n\rtime 2 = %d",curr_value.it_value.tv_nsec);

	printf("\n\rCLOCK:\n\rtime1 = %d\n\rtime2 = %d\n\rTime difference = %d",time1, time2, time2-time1);
	time2 = clock();
	printf("\n\rDe novo: %f",1e6*(time2-time1)/CLOCKS_PER_SEC);
	time2 = clock();
	printf("\n\rDe novo: %f",1e6*(time2-time1)/CLOCKS_PER_SEC);

//	printf("\n\r Seq_bits_rs = ");
//	for( i=0; i<18; i++)
//		printf("%1d",seq_bits_rx[i]);
//	printf("\n\r");

	clock_t aes_time[10];

/*	bi_e[0] = 0xe0370734;
	bi_e[1] = 0x313198a2;
	bi_e[2] = 0x885a308d;
	bi_e[3] = 0x3243f6a8;
*/


	enc_in_buf = RingBuffer_create(80);
	dec_in_buf = RingBuffer_create(80);
	enc_out_buf = RingBuffer_create(108);
	dec_out_buf = RingBuffer_create(108);


	aes_time[0]=clock();
	aes_init_device();
	aes_time[1]=clock();
	aes_key_expansion( key );
	aes_time[2]=clock();
	// Rotina de Escrita no buffer
	RingBuffer_write(enc_in_buf, (uint8_t*)text1, 30);

	printf("enc_in_buf -> length = %d\n\renc_in_buf -> ndata = %d \n\renc_in_buf -> start = %d \n\renc_in_buf -> end = %d \n\r", enc_in_buf->length, enc_in_buf->ndata, enc_in_buf->start, enc_in_buf->end);

	RingBuffer_write(enc_in_buf, (uint8_t*)text2, 46);

	printf("enc_in_buf -> length = %d\n\renc_in_buf -> ndata = %d \n\renc_in_buf -> start = %d \n\renc_in_buf -> end = %d \n\r", enc_in_buf->length, enc_in_buf->ndata, enc_in_buf->start, enc_in_buf->end);

	aes_time[3]=clock();
	//aes_init_enc( (uint32_t)bi_e );
	aes_init_enc_buffer(enc_in_buf);
	aes_time[4]=clock();

	//printf("enc_in_buf -> length = %d\n\renc_in_buf -> ndata = %d \n\renc_in_buf -> start = %d \n\renc_in_buf -> end = %d \n\r", enc_in_buf->length, enc_in_buf->ndata, enc_in_buf->start, enc_in_buf->end);


	while ( !aes_enc_rdy() ) {
	}
	aes_time[5]=clock();

	bo_e = (uint32_t*)malloc(4*sizeof(uint32_t));
	if ( aes_read_enc_buffer(enc_out_buf) )
		RingBuffer_read( enc_out_buf, (uint8_t*) bo_e, 16);
//	bo_e = aes_read_enc();

	printf("\n\rdec_in_buf -> length = %d\n\rdec_in_buf -> ndata = %d \n\rdec_in_buf -> start = %d \n\rdec_in_buf -> end = %d \n\r", dec_in_buf->length, dec_in_buf->ndata, dec_in_buf->start, dec_in_buf->end);


	RingBuffer_write(dec_in_buf, (uint8_t*)bo_e, 16);

	printf("\n\rdec_in_buf -> length = %d\n\rdec_in_buf -> ndata = %d \n\rdec_in_buf -> start = %d \n\rdec_in_buf -> end = %d \n\r", dec_in_buf->length, dec_in_buf->ndata, dec_in_buf->start, dec_in_buf->end);

	aes_time[6]=clock();
	aes_init_dec_buffer( dec_in_buf );
	aes_time[7]=clock();
	//printf("\n\rdec_in_buf -> length = %d\n\rdec_in_buf -> ndata = %d \n\rdec_in_buf -> start = %d \n\rdec_in_buf -> end = %d \n\r", dec_in_buf->length, dec_in_buf->ndata, dec_in_buf->start, dec_in_buf->end);


	while ( !aes_dec_rdy() ) {
	}
	aes_time[8]=clock();
	//printf("\n\rdec_out_buf -> length = %d\n\rdec_out_buf -> ndata = %d \n\rdec_out_buf -> start = %d \n\rdec_out_buf -> end = %d \n\r", dec_out_buf->length, dec_out_buf->ndata, dec_out_buf->start, dec_out_buf->end);

	bo_d = (uint32_t*)malloc(4*sizeof(uint32_t));
	aes_time[9]=clock();
	if ( aes_read_dec_buffer(dec_out_buf) )
		RingBuffer_read( dec_out_buf, (uint8_t*) bo_d, 16);

	printf("\n\rdec_out_buf -> length = %d\n\rdec_out_buf -> ndata = %d \n\rdec_out_buf -> start = %d \n\rdec_out_buf -> end = %d \n\r", dec_out_buf->length, dec_out_buf->ndata, dec_out_buf->start, dec_out_buf->end);

	//printf("bi_e = 0x%08x%08x%08x%08x \n\r",bi_e[3],bi_e[2],bi_e[1],bi_e[0]);
	//printf("bi_e = %s\n",bi_e);
	//printf("bo_e = 0x%08x%08x%08x%08x \n\r",bo_e[3],bo_e[2],bo_e[1],bo_e[0]);
	printf("bo_e = %s\n",bo_e);
	printf("bo_d = %s\n",bo_d);
	//printf("bo_d = 0x%08x%08x%08x%08x \n\r",bo_d[3],bo_d[2],bo_d[1],bo_d[0]);

	RingBuffer_destroy(enc_in_buf);
	RingBuffer_destroy(dec_in_buf);
	RingBuffer_destroy(enc_out_buf);
	RingBuffer_destroy(dec_out_buf);
	free(bo_e);
	free(bo_d);

	printf("\n\r");
	for(i=0; i<10; i++)
	{
		printf("\n\raes_time %d = %d",i,aes_time[i]);
	}
	for(i=1; i<10; i++)
	{
		printf("\n\raes_time (%d - %d) = %d",i,i-1,aes_time[i]-aes_time[i-1]);
	}


}
